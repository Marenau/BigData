# -*- coding: utf-8 -*-
"""PR1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15g6gfszJM74Gnrkoglh1Cw2oC_voU53z

### Задание 1

> Работаю в Google Colab ♥

### Задание 2
Написать программу, которая вычисляет площадь фигуры,
параметры которой подаются на вход. Фигуры, которые подаются на вход:
треугольник, прямоугольник, круг. Результатом работы является словарь, где
ключ – это название фигуры, а значение – это площадь.
"""

import math

def calculate_area(shape, params):
    if shape == 'треугольник':
        base, height = params
        area = 0.5 * base * height
    elif shape == 'прямоугольник':
        length, width = params
        area = length * width
    elif shape == 'круг':
        radius = params
        area = math.pi * radius ** 2
    else:
        raise ValueError("Неизвестная фигура")
    return area

def main():
    shapes = {
        'треугольник': (5, 10),
        'прямоугольник': (4, 6),
        'круг': (3)
    }

    areas = {}
    for shape, params in shapes.items():
        areas[shape] = calculate_area(shape, params)

    print(areas)

main()

"""### Задание 3
Написать программу, которая на вход получает два числа и
операцию, которую к ним нужно применить. Должны быть реализованы
следующие операции: +, -, /, //, abs – модуль, pow или ** – возведение в
степень.
"""

def calculate(num1, num2, operation):
    if operation == '+':
        return num1 + num2
    elif operation == '-':
        return num1 - num2
    elif operation == '/':
        if num2 == 0:
            return "Ошибка: деление на ноль"
        return num1 / num2
    elif operation == '//':
        if num2 == 0:
            return "Ошибка: деление на ноль"
        return num1 // num2
    elif operation == 'abs':
        return abs(num1)
    elif operation == 'pow' or operation == '**':
        return num1 ** num2
    else:
        return "Ошибка: неизвестная операция"

def main():
    num1 = float(input("Введите первое число: "))
    num2 = float(input("Введите второе число: "))
    operation = input("Введите операцию (+, -, /, //, abs, pow или **): ")

    result = calculate(num1, num2, operation)
    print(f"Результат: {result}")

main()

"""### Задание 4
Напишите программу, которая считывает с консоли числа (по
одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0 и
после этого выводит сумму квадратов всех считанных чисел.
"""

def main():
    numbers = []
    total_sum = 0

    while True:
        try:
            num = float(input("Введите число: "))
            numbers.append(num)
            total_sum += num

            if total_sum == 0:
                break
        except ValueError:
            print("Ошибка: введено некорректное значение. Пожалуйста, введите число.")

    sum_of_squares = sum(x ** 2 for x in numbers)
    print(f"Сумма квадратов всех считанных чисел: {sum_of_squares}")

main()

"""### Задание 5
Напишите программу, которая выводит последовательность
чисел, длинною N, где каждое число повторяется столько раз, чему оно равно.
На вход программе передаётся неотрицательное целое число N. Например,
если N = 7, то программа должна вывести 1 2 2 3 3 3 4. Вывод элементов списка
через пробел – print(*list).
"""

def generate_sequence(N):
    sequence = []
    current_number = 1
    while len(sequence) < N:
        for _ in range(current_number):
            if len(sequence) < N:
                sequence.append(current_number)
        current_number += 1
    return sequence

def main():
    N = int(input("Введите неотрицательное целое число N: "))
    if N < 0:
        print("Ошибка: N должно быть неотрицательным числом.")
        return

    sequence = generate_sequence(N)
    print(*sequence)

main()

"""### Задание 6
Даны два списка:
А = [1, 2, 3, 4, 2, 1, 3, 4, 5, 6, 5, 4, 3, 2]
В = [‘a’, ’b’, ’c’, ’c’, ’c’, ’b’, ’a’, ’c’, ’a’, ’a’, ’b’, ’c’, ’b’, ’a’]
Создать словарь, в котором ключи – это содержимое списка В, а
значения для ключей словаря – это сумма всех элементов списка А в
соответствии с буквой, содержащийся на той же позиции в списке В.
Пример результата программы: {‘a’ : 10, ‘b’ : 15, ‘c’ : 6}.
"""

A = [1, 2, 3, 4, 2, 1, 3, 4, 5, 6, 5, 4, 3, 2]
B = ['a', 'b', 'c', 'c', 'c', 'b', 'a', 'c', 'a', 'a', 'b', 'c', 'b', 'a']

result = {}

for a, b in zip(A, B):
    if b in result:
        result[b] += a
    else:
        result[b] = a

print(result)

"""### Задание 7
Скачать и загрузить данные о стоимости домов в калифорнии,
используя библиотеку sklearn.
"""

from sklearn.datasets import fetch_california_housing

data = fetch_california_housing(as_frame=True)

"""### Задание 8
Использовать метод info().
"""

import pandas

_data = pandas.DataFrame(data.data, columns=data.feature_names)
_data['Target'] = data.target

_data.info()

"""### Задание 9
Узнать, есть ли пропущенные значения, используя isna().sum().
"""

missing_values = _data.isna().sum()
print(missing_values)

"""### Задание 10
Вывести записи, где средний возраст домов в районе более 50 лет и
население более 2500 человек, используя метод loc().
"""

filtered_data = _data.loc[(_data['HouseAge'] > 50) & (_data['Population'] > 2500)]
print(filtered_data)

"""### Задание 11
Узнать максимальное и минимальное значения медианной
стоимости дома.
"""

max = _data['Target'].max()
min = _data['Target'].min()
print(max, min)

"""### Задание 12
Используя метод apply(), вывести на экран название признака и его
среднее значение.
"""

mean_values = _data.apply(lambda x: x.mean())
for feature, mean_value in mean_values.items():
    print(f"Признак: {feature}, Среднее значение: {mean_value}")

"""### Задание 1.*
Дан текст на английском языке. Необходимо закодировать его с
помощью азбуки Морзе, где каждой букве соответствует
последовательность точек и тире. Например, буква «g» превратится в
строку «--.». В переменной morze для удобства хранится словарь
соответствия латинских букв коду Морзе.
morze = {'a': '.-', 'b': '-…', 'c': '-.-.', 'd': '-..',
 'e': '.', 'f': '..-.', 'g': '--.', 'h': '….',
 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',
 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',
 'q': '--.-', 'r': '.-.', 's': '…', 't': '-',
 'u': '..-', 'v': '…-', 'w': '.--', 'x': '-..-',
 'y': '-.--', 'z': '--..'}
На входе: В одной строке вам дан текст, который состоит из латинских
букв и пробелов.
На выходе:
Выведите каждое слово исходного текста, закодированное азбукой
Морзе. Количество строк в ответе должно совпадать с количеством слов
в исходном тексте. Между закодированными буквами ставится ровно
один пробел. Например, слово «Help» превратится в «.... . .-.. .--.».
Строчные и заглавные буквы кодируются одинаково.
Например:
Ignition sequence start
Перевод
.. --. -. .. - .. --- -.
… . --.- ..- . -. -.-. .
… - .- .-. -
"""

# Словарь соответствия латинских букв коду Морзе
morze = {
    'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..',
    'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',
    'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',
    'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',
    'q': '--.-', 'r': '.-.', 's': '...', 't': '-',
    'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
    'y': '-.--', 'z': '--..'
}

def encode_to_morse(text):
    encoded_text = []
    for char in text.lower():
        if char in morze:
            encoded_text.append(morze[char])
        elif char == ' ':
            encoded_text.append('\n')
    return ''.join(encoded_text)

input_text = str(input("Введите текст: "))
encoded_text = encode_to_morse(input_text)
print(f"Закодированный текст:\n{encoded_text}")

"""### Задание 2.*
В некотором городе открывается новая служба по доставке электронных
писем. Необходимо наладить систему регистрации новых
пользователей.
Регистрация должна работать следующим образом: если новый
пользователь хочет зарегистрироваться на сайте, то он должен послать
системе запрос name со своим именем. Система должна определить,
существует ли уже такое имя в базе данных. Если такого имени не
существует, то оно заносится в базу данных системы и пользователю
возвращается ответ "ОК", подтверждающий успешную регистрацию. А
если пользователь с таким именем уже существует, то система должна
сформировать новое имя и выдать его пользователю в качестве
подсказки, при этом сама подсказка также добавляется в базу данных.
Новое имя формируется следующим образом: к name последовательно
приписываются числа, начиная с 1 (name1, name2 и так далее), и среди
них находят такое наименьшее i, что namei еще не содержится в системе.
Входные данные
В первой строке входных данных задано число n (1 ≤ n ≤ 100000).
Следующие n строк содержат запросы к системе. Каждый запрос
представляет собой непустую строку длиной не более 32 символов,
состоящую только из строчных букв латинского алфавита.
Выходные данные
В выходных данных должно содержаться n строк – ответы системы на
запросы: "OK" в случае успешной регистрации, или подсказка с новым
именем, если запрашиваемое уже занято.

#### Данные для проверки:
Вход:

3

b

b

b

Выход:

OK

b1

b2

Вход:

10

bhnqaptmp

bhnqaptmp

bhnqaptmp

bhnqaptmp

bhnqaptmp

bhnqaptmp

bhnqaptmp

bhnqaptmp

bhnqaptmp

bhnqaptmp

Выход:

OK

bhnqaptmp1

bhnqaptmp2

bhnqaptmp3

bhnqaptmp4

bhnqaptmp5

bhnqaptmp6

bhnqaptmp7

bhnqaptmp8

bhnqaptmp9

Вход:

10

fpqhfouqdldravpjttarh

fpqhfouqdldravpjttarh

fpqhfouqdldravpjttarh

fpqhfouqdldravpjttarh

fpqhfouqdldravpjttarh

fpqhfouqdldravpjttarh

jmvlplnrmba

fpqhfouqdldravpjttarh

jmvlplnrmba

fpqhfouqdldravpjttarh

Выход:

OK

fpqhfouqdldravpjttarh1

fpqhfouqdldravpjttarh2

fpqhfouqdldravpjttarh3

fpqhfouqdldravpjttarh4

fpqhfouqdldravpjttarh5

OK

fpqhfouqdldravpjttarh6

jmvlplnrmba1

fpqhfouqdldravpjttarh7
"""

def register_user(user_database, request):
    if request not in user_database:
        user_database[request] = 1
        return "OK"
    else:
        count = user_database[request]
        new_name = f"{request}{count}"
        while new_name in user_database:
            count += 1
            new_name = f"{request}{count}"
        user_database[new_name] = 1
        user_database[request] = count + 1
        return new_name

def main():
    user_database = {}
    n = int(input("Введите количество запросов: "))

    for _ in range(n):
        request = input("Введите имя для регистрации: ")
        result = register_user(user_database, request)
        print(result)

main()

"""### Задание 3.*
Необходимо создать программу обработки запросов пользователей к
файловой системе компьютера. Над каждым файлом можно производить
следующие действия: запись – w ("write"), чтение – r ("read"), запуск – x
("execute").
Входные данные
На вход программе подаются следующие параметры: число n –
количество файлов в файловой системе. В следующих n строках
содержится информация с именами файлов и допустимыми действиями
(w, x, r), разделенных пробелами. Далее идет число m – количество
запросов к файлам вида «операция файл» (обозначение операции:
"write", "read", "execute").
Выходные данные
Для каждого допустимого запроса программа должна возвращать OK,
для недопустимого – Access denied.

### Данные для проверки:
Вход:

python.exe x

book.txt r w

notebook.exe r w x

5

read python.exe

read book.txt

write notebook.exe

execute notebook.exe

write book.txt

Вывод:

Access denied

OK

OK

OK

OK

Вход:

root.html r w x

main.py x

login.txt w r

4

read root.html

write main.py

execute main.py

execute login.txt

Вывод:

OK

Access denied

OK

Access denied

Вход:

2

1.txt

2.txt

2

write 1.txt

execute 2.txt

Выход:

Access denied

Access denied
"""

def process_request(file_info, request, operation_map):
    operation, file = request.split()
    if file in file_info and operation_map[operation] in file_info[file]:
        return "OK"
    else:
        return "Access denied"

def main():
    operation_map = {
        "execute": "x",
        "read": "r",
        "write": "w"
    }

    n = int(input("Введите количество файлов: "))
    file_info = {}

    for _ in range(n):
        file_data = input("Введите имя файла и допустимые действия: ").split()
        file_name = file_data[0]
        actions = set(file_data[1:])
        file_info[file_name] = actions

    m = int(input("Введите количество запросов: "))

    for _ in range(m):
        request = input("Введите запрос (операция файл): ")
        result = process_request(file_info, request, operation_map)
        print(result)

main()